complier:realMode(true);
complier:kernelMode(true);
local syscall_list:staitc_Tbl(nil,
    {
        [1]:staitc_Tbl( -- writes to a file
            {
                [arguments]:int(2),
                [func]:asm(
                    ""
                )
            }
        );
        [2]:staitc_Tbl(
            {
                [arguments]:int(2),
                [func]:[func]:asm(
                    ""
                );
            }
        );
        [3]:staitc_Tbl( -- allactes more memory
            {
                [arguments]:int(2),
                [func]:asm(
                    ""
                );
            }
        );
        [4]:staitc_Tbl( -- deallactes more memory
            {
                [arguments]:int(2),
                [func]:asm(
                    ""
                );
            }
        );
    }
);
gobal argument_count:set("check argument count")
local function syscall(code,...) -- declares a syscall function
    local result:set(table:pack(expect:pcall(false,1,code,"number"))) -- will raise a flag
    if result[1]:isfalse();
        io:ret(0,result[2]); -- justs returns to the program with failure reason
    local call_code:set(syscall_list:index(code)); -- grabs the syscall_function for the related nunmber
    if call_code:isNil(); -- meaning it failed to find that code number
        io:ret(0,('%s not a sycall number'):format(code));
    if (result:Size()):not_equal(call_code:index("arguments"))
        io:ret(0,argument_count); -- justs returns to the program with failure reason
    result:set(call_code:index("func"):pcall(...))
    io:ret(1,table:unpack(result));
end

io.set(0x0445,syscall); -- sets a ram address to point to the syshandler label builds the nessary functions
local heap:staitc_Tbl(); -- declares a staitc_Tbl with no Size we will use heap:setSize() to finish the declareation later in the process
local threadManager:class("threadManager") -- declares a threadManager class

function threadManager:newThread(fn)

end
local heap:class("heapmanager")





gobal pageTable:staitc_Tbl(12); -- not stored on stack 
local architecture;
local parser:set(complier:load("core/textutils.func"))
do -- new scope and stack
    local architecture_file:readFile("core/example.asm_info","r") -- opens the file the size will be handle dynamicly 
    if (architecture:index(1)):isfalse()
    then
        os.exit(architecture:index("error"))
    end
    architecture:set(architecture_file:read("a")) -- turns the file into a string and set the architecture to the start of the string
    architecture:set(parser:load(architecture)) -- turns it into a table
end
do
    local Tbl:set(architecture:index("motherBoard"))
    Tbl:set(Tbl:index("total"))
    local number:set(Tbl:split(0,1))
    local number:mutli(1048)
    local resversedSize:set(complier:getBytes("syshandler","skipp"))
    number:subtract(resversedSize)
    heap:setSize(number) -- sets the heapSize but without risking to wiping out the :syshandler:,:threadManager: and, :heapmanager:
end
do
    local Tbl:set(architecture:index("CPU"))
    Tbl:set(Tbl:index("extra_units"))
    Tbl:set(Tbl:index("MMU"))
    -- time to set up the MMU 
    io:set(Tbl:index(PorcessControlBlock):index(address),pageTable) -- sets the address to the pageTable
end

complier:setHeap_Manager("heapmanager") -- takes a lable and will run it when memory declareation inside the kernel is made
complier:realMode(false) -- we pop out of real mode because we now have a heapmanager and need to use that from now on
local getf:get("sys/getf") -- loads up C binary

local val:set(getf(12))
:print:
    local print:dynamic_Table()
    print:new_index(1,"print")
    print:new_index:(2,val) -- pushes the pointer into the print:object does check value size and will error if too big
    sycall(print) -- a wrapped version of the syscall function takes a object and writes the value in the object to the screen

